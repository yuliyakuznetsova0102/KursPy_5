services:
  web:
    build: .
    command: sh -c "python manage.py migrate && python manage.py collectstatic --noinput && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    env_file:
      - ./.env

  nginx:
      build:
        context: ./nginx
      ports:
        - "80:80"
      volumes:
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        - static_volume:/app/staticfiles
      depends_on:
        - web

  db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:6
    container_name: redis
    ports:
          - "6379:6379"
    volumes:
          - redis_data:/data
    healthcheck:
           test: [ "CMD", "redis-cli", "ping" ]
           interval: 5s
           timeout: 5s
           retries: 5

  backend:
    build: .
    container_name: backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn DJHW2.wsgi:application --bind 0.0.0.0:8000"

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery
    env_file:
      - .env
    depends_on:
      - backend
      - redis
    volumes:
      - .:/app
    networks:
      - backend_network
    command: celery -A DJHW2 worker --loglevel=info

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_beat
    env_file:
      - .env
    depends_on:
      - backend
      - redis
      - celery
    volumes:
      - .:/app
    networks:
      - backend_network
    command: celery -A DJHW2 beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

volumes:
  postgres_data:
  redis_data:

networks:
  backend_network:
    driver: bridge